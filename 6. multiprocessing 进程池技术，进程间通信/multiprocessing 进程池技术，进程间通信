
####
1. 如果父子进程从进程拷贝对象， 对象和网络或者文件相关联，那么父
   子进程会使用同一套对象属性，相互有一定的关联性
2. 如果在子进程中单独创建对象，则和父进程完全没有关联

multiprocessing
Process 进程对象属性
    p.start()
    p.join()

    p.is_alive()
        # 判断进程的生命周期状态，处于生命周期得到True， 否则返回False
    p.name
        # 进程名称 默认为Process-1
    p.pid
        # 进程的PID号
    p.deamon
        # 默认状态下是False, 主进程退出不会影响子进程执行
          如果设置为True, 则子进程会随着主进程结束而结束
        * 要在start前设置
        * 一般不和join一起使用


创建自定义进程类
    1. 继承Process
    2. 编写自己的__init__, 同时加载父类的__init__方法
    3. 重写run方法， 通过生成打对象调用start自动运行

多进程
    优点：
        可以使用计算机多核， 进行任务的并发执行，提高执行效率
        空间独立， 数据安全
        运行不受其他进程影响，创建方便
    缺点
        进程的创建和删除消耗的系统资源比较多

进程池技术
    产生原因
        如果由大量的需要多进程完成， 则可能需要频繁的创建和删除进程，
        给计算机带来较多的资源消耗

    原理
        创建适当的进程放入进程池， 用来处理待处理事件，处理完毕后进程不
        销毁，仍然在进程池中等待处理其他事件。进程的复用降低了资源的消耗

    使用方法
        1. 创建进程池，在池内放入适当的进程
        2. 将事件加入到进程池等待队列
        3. 事件不断取进程执行事件，直到所有事件执行完毕，关闭进程池，回收进程

    from multiprocessing import Pool
    Pool(process)
        功能：
            创建进程池对象
        参数
            表示进程池中有多少进程

        ## 方法 ##
        pool.apply_async(func, args, kwds)
            功能
                将事件放入到进程池队列
            参数
               func 事件函数
               args 以元组形式给func传参
               kwds 以字典形式给func传参
           返回值
               返回一个代表进程事件的对象

        pool.close()
            关闭进程池
        pool.join()
            回收进程池
        pool.map(fun, iterable)
            功能
                将要做的事件放入进程池
            参数
                func 要执行的函数
                iterable 迭代对象
            返回值
                返回事件函数的返回值


进程间通信（IPC）
    原因
        进程空间相对独立， 资源无法相互获取， 此时在不同进程间通信需要专门的方法
    进程间通信方法
        管道         消息队列    共享内存    信号   信号量    套接字


管道通信 Pipe
    通信原理
        在内存中开辟管道空间, 生成管道操作对象, 多个进程使用'同一个'管道对象进行操作即可实现通信
    form multiprocessing import Pipe

        fd1, fd2 = Pipe(duplex=True)
            功能
                创建管道
            参数
                默认表示双向管道
                如果设置为False 则为单向管道
            返回值
                表示管道的两端
                如果是双向管道, 都可以读写
                如果是单向管道, 则fd1可读, fd2只写

        fd.recv()
            功能
                从管道读取信息
            返回值
                读取到内容
            * 如果管道为空则阻塞

        fd.send()
            功能
                向管道写入内容
            参数
                要写入的内容
            * 可以发送python数据类型


消息队列
    通信原理
        在内存中建立数据结构模型， 多个进程都可以通过队列存入内容，取出内容的顺序和存入的顺序保持一致

    创建队列
        q = Queue(maxsize=0)
        功能
            创建消息队列
        参数
            表示最多存放多少消息, 默认为0表示很据内存分配存储
        返回值
            队列对象

        q.put(data, [block, tomeout])
        功能
            向队列存储消息
        参数
            data
                要存的内容
            block
                默认队列满时阻塞, 设置为False则非阻塞
            timeout
                超时时间

        q.get([block, timeout])
        功能
            获取队列消息
        参数
            block
                默认队列空时阻塞, 设置为False则非阻塞
            timeout
                超时时间
        返回值
            返回取出的内容
        q.full()  判断队列是否为满
        q.empty() 判断队列是否为空
        q.size()  判断队列中消息数量
        q.close() 关闭队列


共享内存
    通信原理
        在内存中开辟一块空间, 对多个进程可见, 进程可以写入数据, 每次写入的内容会覆盖之前的内容

    obj = Value(ctype, obj)
    功能：
        开辟共享内存空间
    参数
        ctype 要存储的数据类型
        obj  共享内存的初始化数据
    返回
        返回共享内存对象

    obj = Array(ctype, obj)
    功能：
        开辟共享内存空间
    参数
        ctype 要存储的数据类型
        obj  初始化存入的内容，比如列表，字符串
        如果是整数则表示开辟的空间的个数
    返回
        返回共享内存对象
    *** 可以通过遍历获取每个元素的值
    *** 如果存入的是字符串，obj.value 表示字符串的首地址


        管道         消息队列       共享内存
读写方式
        两端读写       先进先出      覆盖之前内容
        双向/单向
效率
        一般          一般          较高
应用场景
        多用于父      广泛灵活       需要注意进行互斥操作
        子进程


信号通信
    通过一个进程向另一个进程发送一个信号来传递某种信息，接收者根据接收到的信号进行相应的行为

    kill -l  查看系统信号
    kill -sig PIG  向一个进程发送信号

关于信号
    信号名称        信号含义        默认处理方法
    SIGHUP          链接断开
    SIGINT          CRTL+C
    SIGQUIT         CTRL+\
    SIGTSTP         CTRL+Z
    SIGKILL         终止一个进程
    SIGSTOP         暂停一个进程
    SIGALRM         时钟信号
    SIGCHLD         子进程状态改变时给父进程发出

    os.kill(pid, sig)  # 发送信号
    功能
        发送信号
    参数
        pid 目标进程
        sig 要发送的信号
