
如何避免僵尸进程的产生
    1. 处理子进程退出状态
        pid, status = os.wait()
        功能：
            在父进程中阻塞等待处理子进程退出
        参数：
            无
        返回值：
            pid 退出的子进程的PID号
            status 获取子进程的退出状态
        实例
            wait.py

        pid, status = os.waitpid(pid, option)
        功能：
            在父进程中阻塞等待处理子进程退出
        参数：
            pid:
                -1 等待任意子进程退出
                >0 的整数, 表示等待对应PID号的子进程退出
            option:
                0 表示阻塞等待
                WNOHANG 表示非阻塞
        返回值：
            pid 退出的子进程的PID号
            status 获取子进程的退出状态
        实例
            waitpid.py
        waitpid(-1, 0)   ---> 等价于 wait()

    2. 如何让父进程先退出
        1. 父进程创建子进程等待子进程退出
        2. 子进程创建二级子进程后立即退出
        3. 二级子进程称为孤儿，和原来的父进程各自执行事件
        实例：
            fork.py


multiprocessing 模块创建进程
    1. 需要将要执行的事情封装为函数
    2. 使用multiprocessing 模块中Process 类创建进程对象
    3. 通过对象属性设置和Process的初始化函数对进程设置，绑定要执行的函数
    4. 启动进程会自动执行绑定的函数
    5. 完成进程的回收

Process()
    功能
        创建进程对象
    参数
        name    进程名称        Process-1
        target  进程绑定函数     必选参数
        args    元组, 给target函数按照位置传参
        kwargs  字典, 给target函数按照字典关键字传参

p.start()
    功能
        启动进程
    *target 函数自动执行， 此时进程真正被创建

p.join([timeout])
    功能
        阻塞等待回收的子进程
    参数
        超时时间

# 使用multiprocessing 创建子进程， 同样子进程复制父进程的全部代码段， 父子进程各自互不影响，
  父子进程有各自的运行空间

# 如果不使用join回收子进程则进程退出后会成为僵尸进程

# 使用multiprocessing 创建子进程往往父进程只是用来创建进程回收进程













