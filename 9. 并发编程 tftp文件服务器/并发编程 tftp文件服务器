服务器模型
    硬件服务器： 主机    /    集群
        厂商： IBM  HP  联想  浪潮

    软件服务器
        编写的服务端应用程序， 在硬件服务器上一般依托与操作系统
        给用户提供一套完整的服务

httpserver      处理http请求
webserver       网站的后端应用服务器程序
邮箱服务器        邮件处理
ftp文件服务器     文件的上传下载

功能：
    网络链接  逻辑处理   数据交互    数据传输    协议实现

结构
    c\s    客户端服务器模型
    b\s    浏览器服务器模型

服务器目标
    处理速度更快
    并发量更高-
    安全性更强

硬件
    更高的配置，更好的集成分布技术，更好的网络优化和网络安全技术
软件
    占用资源更少，运行更稳定，算法更优良，安全性更好， 并发性更高，更容易扩展


基础的服务端模型
    循环模型
        循环接收客户端请求， 处理请求。 同一时刻只能处理一个请求，
        处理完毕再处理下一个

        优点
            实现简单， 单进程程序占用资源少
        缺点
            无法同时处理多个客户端任务
        适用情况
            处理的任务可以短时间完成，不需要建立并发，更适合UDP使用

    并发模型
        能够同时处理多个客户端请求
            IO 并发
                IO多路复用
                优点
                    资源消耗少， IO处理速度快
                缺点
                    不能适用CPU密集型程序
                    不能长期阻塞


            多进程/多线程并发
                原理
                    为每个客户端创建单独的进程线程，执行请求
                优点
                    每个客户端可以长期占有服务器运行程序，能够使用多核资源，可以处理
                    IO或者CPU运算
                缺点
                    消耗资源高


多进程并发模型
    使用fork实现多进程并发
        1. 创建套接字, 绑定监听
        2. 等待接收客户端请求
        3. 创建新的进程处理客户端请求
        4. 原有进程继续等待新的客户端链接
        5. 如果客户端退出则关闭子进程

    # 在父进程中忽略子进程状态改变，子进程退出自动由系统处理
        signal(SIGCHLD, SIG_IGN)


ftp 文件服务器
# 项目功能
    *　服务端和客户端两个部分
    *　一个服务端可以处理多个客户端要求
    * 1. 可以查看文件库中所有的普通文件
    　2. 从客户端可以下载文件库的文件到本地
    　3. 可以将本地文件上传到服务端文件库
      4. 退出功能
    * 使用print(在终端打印简单的命令提示，通过命令提示发起请求)


# 查看文件夹下的所有内容
    os.listdir()

# 判断是否为普通文件
    os.path.isfile()

# 判断是否为目录
    os.path.isdir()


多线程并发
    对比多进程并发
        * 消耗资源少,
        * 线程应该更注意共享资源的操作
        * 在Python中应该注意GIL问题,网络延迟较高,线程并发也是一种可行的办法

实现步骤
    1. 创建套接字, 绑定监听
    2. 接受客户端请求, 创建新的线程
    3. 主线程继续接受其他客户端链接
    4. 分支线程启动对应的函数处理客户端请求
    5. 当客户端断开, 则分支线程结束

### tarceback
import traceback
    功能
        更详细的打印异常信息
    traceback.print_exc()


集成模块的使用
    Python2 SocketServer
    Python3 socketserver

    功能
        通过模块的不同类的组合完成多进程多线程的TCP/UDP的并发

    StreamRequestsHandler  处理tcp请求套接字
    DatagramRequestsHandler 处理udp请求套接字

    TCPServer 创建tcp server
    UDPServer 创建udp server

    ForkingMixIn  创建多进程
    ForkingTCPServer   ---> ForkingMinIn + TCPServer
    ForkingUDPServer   ---> ForkingMinIn + UDPServer

    ThreadingMinIn   创建多线程
    ThreadingTCPServer --->   ThreadingMinIn + TCPServer
    ThreadingUDPServer --->   ThreadingMinIn + UDPServer


HTTPServer v2.0

1. 接收客户端请求
2. 解析客户端请求
3. 组织数据, 形成HTTP response
4. 将数据发送给客户端

升级
1. 采用多线程并发,接收多个客户端请求
2. 基本的请求解析,根据请求返回相应的内容
3. 除了可以请求静态网页也可以请求简单的数据
4. 将功能封装在一个类中

技术点
    1. socket　TCP套接字
    2. http协议的请求响应格式
    3. 线程并发的创建方法
    4. 类的基本使用


协程基础
    定义
        纤程，微线程. 协程的本质是一个单线程程序，所有以协程不能使用计算机多核资源.
    作用
        能够高效的完成并发任务，占用较少的资源，因此协程的并发量较高
    原理
        通过记录应用层的上下文栈区，实现在运行中进行上下文跳转达到可以选择性的运行
        想要运行的部分，以此提高程序的运行效率．
    优点
        消耗资源少，无需切换开销
        无需同步互斥，IO 并发性好
    缺点
        无法利用计算机多核资源


yield 协程实现的基本关键字

# 第三方库
    greenlet
        gr = greenlet.greenlet()  # 生成协程对象
        gr.switch()  # 选择要执行打协程事件
    gevent

        1. 将协程事件封装为函数
        2. 生成协程对象
            gevent.spawn(func, argv)
            功能
                生成协程对象
            参数
                func
                    协程函数
                argv
                    给协程函数传参
            返回值
                返回协程对象
        3.　回收协程
            gevent.joinall()
            功能：
                回收协程
            参数
                列表，　将要回收的协程放入列表

        gevent.sleep(n)
        功能
            设置协程阻塞，让协程跳转
        参数
            n 阻塞时间

        from gevent import monkey
        monkey.patch_all()
            功能
                修改套接字的IO阻塞行为
                
            *必须在socket 导入之前使用

























