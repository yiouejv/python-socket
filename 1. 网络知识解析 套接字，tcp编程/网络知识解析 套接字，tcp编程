吕泽
    lvze@tedu.cn

课程安排
    1. 网络编程( 4天)
    2. 进程线程( 5天)
    3. MongoDB( 4天)
    4. 正则表达式( 1.5天)
    5. 项目(2.5天)
    6. git的使用(1天)


网络编程
    网络功能 --> 数据传输


ISO(国际标准化组织)


OSI七层模型
    网络通信工作流程的标准化
        应用层        -------->提供用户服务, 具体功能由特定的程序而定
        表示层        -------->数据的压缩优化,加密
        会话层        -------->建立应用级的连接, 选择传输服务
        传输层        -------->提供不同的传输服务, 流量控制
        网络层        -------->路由选择, 网络互连
        数据链路层     -------->进行数据转换, 具体消息的发送, 链路连接
        物理层        -------->物理硬件, 接口设定, 网卡路由交换机等


cookie
    高内聚: 模块功能尽可能单一, 不要掺杂
    低耦合: 模块之间尽可能减少关联和影响


OSI模型的优点
    1. 将工作流程标准化
    2. 降低了模块之间的耦合度, 使每一块都可以单独开发, 单独工作.


四层模型
    应用层: 应用层 表示层 会话层
    传输层
    网络层
    物理链路层


五层模型(TCP/IP模型)
    应用层: 应用层 表示层 会话层
    传输层
    网络层
    链路层
    物理层


数据传输流程
    1. 发送端由应用层逐层添加信息头, 最终在物理层发送
    2. 中间经过节点转发(交换机, 路由器等)转发, 发送到接受端
    3. 在接收端根据发送端的每个信息头进行解析, 最终消息到应用层展示给用户


网络协议
    在网络通信中双方都遵循的规定, 包括建立什么样的网络结构, 消息结构, 标识代表什么等.

    应用层
        TFTP HTTP DNS SMTP
    传输层
        TCP UDP
    网络层
        IP
    物理层
        IEEE


网络相关的概念
    网络主机
        在网络中标识一台计算机, HOST
    本地使用
        'localhost'
        '127.0.0.1'
    网络使用
        '0.0.0.0'   # 当前计算机的可用网卡地址
            本机IP


ifconfig: 查看IP信息


获取计算机名称.
    import socket
    hostname = socket.gethostname()
    address = socket.gethostbyname(hostname)


IP地址
    网络上确定一台主机网络位置的地址

    IPv4: 点分十进制 0-255
    IPv6: 128位可能性


连接测试命令
    ping
        测试和某台网络主机是否连通


特殊IP地址
    127.0.0.1         本地测试IP
    0.0.0.0           使用本机可用IP
    192.168.1.0       表示网段IP
    192.168.1.1       表示网关IP
    192.168.1.255     广播地址


域名
    网络服务器地址的名称

    方便记忆
    名称表达一定的含义


网络端口号
    定义
        是网络地址的一部分, 用于区分一个网络主机上的网络应用
    * 在一个系统中不同的网络应用监听不同的端口号


    取值范围
        1 - 65535
            1-255         一些众所周知的通用端口
            256 - 1023    系统应用端口
            1024- 65535   自用端口
            建议使用 > 10000 的端口号


获取应用的端口
    socket.getbyname('')


网络字节序
    数据在网络中的传输格式


传输层服务
    面向连接的传输服务
        基于TCP 协议的数据传输
           提供可靠的数据传输,可靠性指数据传输中无丢失, 无失序, 无差错, 无重复
        实现方式
            数据传输断开前都需要进行传输和断开的确认
            数据传输连接和断开的过程
                三次握手
                    TCP传输在数据传输前建立连接的过程
                        1. 客户端向服务器发送连接请求
                        2. 服务器收到请求后回复确认消息,表示允许连接
                        3. 客户端收到服务器回复进行最终标志发送确认连接
                四次挥手
                    TCP传输在连接断开前进行断开确认的过程
                        1. 主动方发送报文告知被动方要断开连接
                        2. 被动方收到请求后立即返回报文告知已经准备离开
                        3. 被动方准备就绪后再次发送报文告知可以断开
                        4. 主动方发送消息,确定最终断开
            应用场景
                适用于传输较大的文件, 网络情况良好, 需要保证传输可靠性的情况
                如: 网页的获取, 文件下载, 邮件传输, 登录注册

    面向无连接的传输服务
        基于UDP 协议的数据传输
            传输特点
                不保证传输的可靠性,传输过程没有连接和断开的过程, 数据收发自由.

            应用场景
                网络情况较差, 对传输可靠性要求不高, 需要提升传输效率, 不便连接, 需要灵活收发消息
                如: 网络视频, 群聊, 广播发送

要求:
    1. osi 七层模型, tcp/ip模型呢
    2. TCP服务和UDP服务有什么区别
    3. 三次握手和四次挥手是什么意思,过程是什么样的


socket 套接字编程
    目标
        根据socket 提供的接口函数进行组合使用完成基于TCP/UDP的网络编程.

    套接字
        完成上述目标的一种编程方式

    套接字的分类
        流式套接字(SOCK_STREAM)
            传输层基于TCP协议的套接字编程方案

        数据报套接字(SOCK_DGRAM)
            传输层基于UDP协议的套接字编程方案

        底层套接字(SOCK_RAM)
            访问底层协议的套接字编程

    *面向链接的传输 -- > TCP--> 可靠的 --->流式套接字
    *面向无链接的传输 -- > UDP--> 不可靠的 -->数据报套接字


TCP套接字服务端编程
    import socket
    1. 创建套接字
        sockfd = socket.socket(socket_family=AF_INET, socket_type=SOCK_STREAM, proto=0)

        功能: 创建套接字
        参数: socket_family ---> 选择套接字的地址族类型, AF_INET(基于IPv4的网络地址族通信)
             socket_type ---> 套接字类型, SOCK_STREAM 流式套接字, SOCK_DGRAM 数据报套接字
             proto  ---> 选择子协议类型, 0表示不选择任何的类型, TCP/UDP没有子协议
        返回值: 返回套接字对象

    2. 绑定服务端地址
        sockfd.bind(addr)
        功能:
            绑定IP地址
        参数: tuple --> (ip, port)

        localhost -- > 可以被本机用 127.0.0.1 访问
        127.0.0.1 -- > 可以被本机用 127.0.0.1 访问
        本机IP     -- > 可以被所有人用本机IP访问
        0.0.0.0   -- > 可以被别人用本机IP访问, 也可以被自己用127.0.0.1访问

    3. 设置监听套接字
        sockfd.listen(n)
        功能:
            将套接字设置为监听套接字,　创建监听队列
        参数:
            n 表示监听队列的大小
        说明:
            一个监听套接字可以连接多个客户端套接字

    4. 等待处理客户端的连接请求
        connfd, addr = sockfd.accept()
        功能:
            阻塞等待处理客户端链接
        返回值:
            connfd 客户端链接套接字
            addr 链接的客户端地址
    说明:
        阻塞函数: 程序运行过程中遇到阻塞函数则暂停运行, 直到某种阻塞条件达成再继续运行.

    5. 消息收发
        data = connfd.recv(buffersize)
        功能:
            接收对应客户端消息
        参数:
            一次最多接受多少字节
        返回值:
            接受到的内容
            如果没有消息则阻塞

    6. 消息发送
        n = connf.send(data)
        功能:
            发送消息给对应客户端
        参数:
            要发送的内容, 必须是bytes格式
        返回值:
            返回实际发送消息的大小

    7. 关闭套接字
        sockfd.close()
        功能:
            关闭套接字

TCP套接字客户端编程
    1. 创建套接字(必须相同类型的套接字才能通信)

    2. 建立连接
        sockfd.connect(servr_addr)
        功能:
            建立连接
        参数:
            元组, 服务端地址
    3. 消息收发
        消息收发要和服务端配合, 避免两边都出现recv阻塞
    4. 关闭套接字





